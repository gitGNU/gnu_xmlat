#!/usr/bin/perl

##  Copyright (C) 2000, 2012
 
 # xmlatc
 # Author: Antonio Cisternino
 # Current Maintainer: NalaGinrut<mulei@gnu.org>
 
 #  XmlAT is free software: you can redistribute it and/or modify
 #  it under the terms of the GNU General Public License as published by
 #  the Free Software Foundation, either version 3 of the License, or
 #  (at your option) any later version.
 
 #  XmlAT is distributed in the hope that it will be useful,
 #  but WITHOUT ANY WARRANTY; without even the implied warranty of
 #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 #  GNU General Public License for more details.
 
 #  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.

my $version = "0.96";

### Global variables
%tags;
%constants;
my $texton = 1;
my $iftexton = 1; # Introduced to distinguish between directive texton and if
my $prettyformat = 0;
my $htmlspaces = 0;
my $guile = 0;

# This variable means: I'm waiting for the &# endif or another if statement
# because the guard is false. All text and directives other than &# endif
# are ignored.
$home = ".";
my $ifon = 1;
my $fnameIn = "-";
my $fnameOut = ">-";
my $prgname;

# Needed to handle DOS directories
my $prg = $0;
$prg =~ s/\\/\//g;
$prg =~ /(.*?)\/?([^\/]*)$/;
$home = $1 if ($1);
$prgname = $2;

#Parses the command line
sub parseCmdLine {
    my $forceStdout = 0;
    my $usage = "Usage: $prgname {param}*

  param ::= fileName | switchParam
  switchParam ::= { -c | --constant } constantName=value |
                  { -t | -template | --template } templateFileName |
                  { -h | --help } |
                  { -v | --version } |
                  { -o | --stdoutxml } |
                  { -m | --makefile } |
                  { -s | --htmlspaces } |
                  { -p | --prettyformat }

This software is developed by Antonio Cisternino (C)1998, 1999.
";

    my $i = 0;

    while ($i <= $#ARGV) {
	if ($ARGV[$i] !~ /^\s*\-/) { # Normal parameter
	    my $fname = $ARGV[$i];
	    $fname =~ s/\s*(.*?)\s*/$1/;

	    if ($fnameIn eq "-") {
		$fnameIn = "<$fname";
	    } elsif ($fnameOut eq ">-") {
		$fnameOut = ">$fname";
	    } else {
		die "Input and output file names are already specified!\n$usage";
	    }
	} elsif ($ARGV[$i] =~ /^\s*(\-h|\-\-help)\s*$/) { # Switch -h
	    die $usage;
	} elsif ($ARGV[$i] =~ /^\s*(\-v|\-\-version)\s*$/) { # Switch -v
	    die "$prgname version $version\nAntonio Cisternino, (C)1998, 1999\n";
	} elsif ($ARGV[$i] =~ /^\s*(\-o|\-\-stdoutxml)\s*$/) { # Switch -o
	    $forceStdout = 1;
	} elsif ($ARGV[$i] =~ /^\s*(\-c|\-\-constant)\s*$/) { # Switch -c
	    die "Missing parameter to switch $ARGV[$i]!\n$usage" if ($#ARGV == $i);

	    my $param = $ARGV[++$i];

      die "Illegal parameter passed to $ARGV[$i] switch!\n$usage" 
	  if ($param !~ /\s*(\w+)\s*\=\s*(.*?)\s*$/);

	    $constants{uc $1} = $2;
	} elsif ($ARGV[$i] =~ /^\s*(\-t|\-template|\-\-template)\s*$/) { # Switch -t
	    die "Missing parameter to switch $ARGV[$i]!\n$usage" if ($#ARGV == $i);

	    my $param = $ARGV[++$i];
	    $param =~ s/^\s*(.*?)\s*$/$1/;
	    $param =~ s/^LIB\//$home\/stdlib\//;
	    $param =~ s/^EXT\//$home\/stdext\//;

	    readTemplate($param);
	} elsif ($ARGV[$i] =~ /^\s*(\-m|\-makefile|\-\-makefile)\s*$/) { # Switch -m
	    genMakefile();
	    exit(0);
	} elsif ($ARGV[$i] =~ /^\s*(\-s|\-htmlspaces|\-\-htmlspaces)\s*$/) { # Switch -s
	    $htmlspaces = 1;
	} elsif ($ARGV[$i] =~ /^\s*(\-p|\-prettyformat|\-\-prettyformat)\s*$/) { # Switch -p
	    $prettyformat = 1;
	} else {
	    die "Illegal switch: $ARGV[$i]\n$usage";
	}

	++$i;
    }

    $fnameOut = ">$1.html" if (($fnameOut eq ">-") && !$forceStdout && !($fanameIn eq "-") && ($fnameIn =~ /<(.*?)\.xml$/));
}

# This subroutine parses an HTML tag.
sub parseTag {
  my %ret;
  my $tag = $_[0];

  $tag =~ s/\n/\ /g;
  $tag =~ s/<\?(.*)\?>/<$1>/sg;
  $tag =~ s/<(.*)\/>/<$1>/sg;
  $tag =~ /<\s*(!?\/?[\w\-]+)(.*?)>/;
  $name = uc $1;
  $params = $2;

  while ($params =~ /\s*([\w\-]+)\s*=\s*(""|".*?[^\\]"|\S+)(.*)/s) {
    my $key = uc $1;
    my $val = $2;
    my $rest = $3;

    $val =~ s/^"(.*)"$/$1/m;
    $val =~ s/\\"/"/gm;

    $ret{$key} = $val;
    $params = $rest;
  }

  return ($name, %ret);
}

# This variable is used to remember if the &# if directive during
# template parsing to avoid the wrong evalutation of constants.
my $staticIfOn = 0;

# This routine parses the compile time directives (like constants)
# The conditional directives are executed during the execution phase
# The seubroutine checkDirective executes runtime directives.
sub parseDirective {
    my $directive;

    # Parses the &#= directive (constant) (if not contains &! and is not
    # Withinn an if block).
    if ($_[0] =~ /^\s*\&\#\=(.*)/) {
	my $decl = $1;

	return 0 if ($staticIfOn || ($decl =~ /(\&\!|\&\=)/));

	if ($decl =~ /\s*([\w\-]+)\s*\=\s*(".*?"|\S*)/) {
	    my $name = uc $1;
	    my $val = $2;

	    $val =~ s/"(.*?)"/$1/;

	    $constants{$name} = $val;
	}

	return 0; # The variable can be defined at "runtime"
    } elsif ($_[0] =~ /^\s*\&\#\s*if\s*\(/i) {
	$staticIfOn = 1;

	return 0; # The variable can be defined at "runtime"
    } elsif ($_[0] =~ /^\s*\&\#\s*endif/i) {
	$staticIfOn = 0;

	return 0; # The variable can be defined at "runtime"
    # This directive enable guile (if it is present the package guile)
    } elsif ($_[0] =~ /^\s*\&\#\s*guile/i) {
	$guile = 1;

	return 1;
    } elsif (/^\&\#\s*include\s*<(EXT\/|LIB\/)?(.*?)>/i) {
	my $f = $2;

	$f = "$home/stdlib/$f" if ($1 eq "LIB/");
	$f = "$home/stdext/$f" if ($1 eq "EXT/");
	readTemplate($f);

	return 1;
    }

    return 0;
}

# Checks for runtime directives like conditional evaluation.
# Runtime directives are:
#   - &# texton
#   - &# textoff
#   - conditionals
sub checkDirective {
    my $ret = "";
    my $line = shift;
    my $ref = shift;
    my %tag = %$ref;

    # texton directive found
    # Parses the &#= directive (constant)
    if ($ifon && $line =~ /^\s*\&\#\=(.*)/) {
	$_ = $1;

	if (/\s*([\w\-]+)\s*\=\s*(".*?"|\S*)/) {
	    my $name = uc $1;
	    my $val = $2;

	    $val =~ s/"(.*?)"/$1/;

	    $constants{$name} = fillLine($val, \%tag);
	}

	return (1, $ret);
    # texton directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*texton(\s|\n)/i) {
	$texton = 1;
	return (1, $ret);

    # textoff directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*textoff(\s|\n)/i) {
	$texton = 0;
	return (1, $ret);

    # htmlspaceson directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*htmlspaceson(\s|\n)/i) {
	$htmlspaces = 1;
	return (1, $ret);

    # htmlspacesoff directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*htmlspacesoff(\s|\n)/i) {
	$htmlspaces = 0;
	return (1, $ret);

    # prettyformaton directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*prettyformaton(\s|\n)/i) {
	$prettyformat = 1;
	return (1, $ret);

    # prettyformatoff directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*prettyformatoff(\s|\n)/i) {
	$prettyformat = 0;
	return (1, $ret);

    # geval directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*geval (.*)/i) {
	$ret = geval($1);

	return (1, $ret);

    # gdefine directive found
    } elsif ($ifon && $line =~ /^\s*\&\#\s*gdefine (.*)/i) {
	gdefine($1);

	return (1, $ret);

    # taginclude directive found
    } elsif ($ifon && $line =~ /^\&\#\s*taginclude\s*<(EXT\/|LIB\/)?(.*?)>/i) {
	my $f = $2;

	$f = "$home/stdlib/$f" if ($1 eq "LIB/");
	$f = "$home/stdext/$f" if ($1 eq "EXT/");
	readTemplate($f);

	return (1, $ret);

    # If directive found
    } elsif ($line =~ /^\s*\&\#\s*if\s*(\!?)\s*\(\s*(\=?[\w\-]+)\s*,\s*([^\"]\S*?|".*?")\s*\)/i) {
	my $not = 1;
	my $n = uc $2;
	my $m = $3;
	my $val;

	$not = 0 if ($1 eq "!");
	$m =~ s/"(.*?)"/$1/;
	
	if ($n =~ /^\=(.*)/) {
	    $val = $constants{$1};
	} else {
	    $val = $tag{$n};
	}

	if ($val =~ /$m/) {
	    $iftexton = $not;
	} else {
	    $iftexton = !$not;
	}

	$ifon = $iftexton;

	return (1, $ret);

    # Ifeval directive found
    } elsif ($line =~ /^\s*\&\#\s*ifeval\s*(\!?)\s*\(\s*(.*)\s*\)/i) {
	my $not = 1;
	my $m = $2;
	my $val;

	$m = fillLine($m, $ref);

	$not = 0 if ($1 eq "!");

	if (eval($m)) {
	    $iftexton = $not;
	} else {
	    $iftexton = !$not;
	}

	$ifon = $iftexton;

	return (1, $ret);

    # &# else directive found
    } elsif ($line =~ /^\s*\&\#\s*else/i) {
	$ifon = !$ifon;
	$iftexton = !$iftexton;

	return (1, $ret);

    # &# endif directive found
    } elsif ($line =~ /^\s*\&\#\s*endif/i) {
        $ifon = 1;
	$iftexton = 1;

	return (1, $ret);

    # &# exec directive found. All following code is considered the command
    } elsif ($iftexton && $texton && ($line =~ /^\s*\&\#\s*exec\s+([^\r\n]*)/i)) {
	my $cmd = fillLine($1, $ref);
	$ret = `$cmd`;

	return (1, $ret);

    # &# subst directive found. The substitution rule applies.
    } elsif ($iftexton && $texton && ($line =~ /^\s*\&\#\s*subst\s+(\S+)\/(.*)\/(.*)\/(\S*)/i)) {
	my $par = uc $1;
	my $pat = $2;
	my $tosub = $3;
	my $attr = $4;
	my $ret;

	if (exists $tag{$par}) {
	    $ret = $tag{$par};

	    $ret =~ s/$pat/$tosub/g if ($attr =~ /^g\s*/);
	    $ret =~ s/$pat/$tosub/ if ($attr =~ /^\s*$/);
	    $$ref{$par} = $ret; # I use $ref here to change the parameter
	}

	return (1, "");
    }

    return (0, $ret);
}

# Parses the document directives like <!constant> or <!template>
sub parseDocDirectives {
    my $name;
    my $tagref;
    my $ret = "";

    ($name, $tagref) = @_;
    my %tag = %$tagref;

    # The tag <!template src="filename"> loads the specified template
    if ($name eq "!TEMPLATE") {
	if (exists $tag{"LIB"}) {
	    readTemplate("$home/stdlib/$tag{LIB}");
	} elsif (exists $tag{"EXT"}) {
	    readTemplate("$home/stdext/$tag{EXT}");
	} elsif (exists $tag{"SRC"}) {
	    readTemplate($tag{"SRC"});
	}

	return (1, $ret);
    } elsif ($name eq "!CONSTANT") {
	if ((exists $tag{"NAME"}) && (exists $tag{"VALUE"})) {
	    my $n = uc $tag{"NAME"};
	    my $v = $tag{"VALUE"};
	    $constants{$n} = $v;
	}

	return (1, $ret);
    } elsif ($name eq "!TEXTON") {
	$texton = 1;
	return (1, $ret);
    } elsif ($name eq "!TEXTOFF") {
	$texton = 0;
	return (1, $ret);
    } elsif ($name eq "!HTMLSPACESON") {
	$htmlspaces = 1;
	return (1, $ret);
    } elsif ($name eq "!HTMLSPACESOFF") {
	$htmlspaces = 0;
	return (1, $ret);
    } elsif ($name eq "!PRETTYFORMATON") {
	$prettyformat = 1;
	return (1, $ret);
    } elsif ($name eq "!PRETTYFORMATOFF") {
	$prettyformat = 0;
	return (1, $ret);
    } elsif ($iftexton && $texton && ($name eq "!EXEC")) {
	my $back = $/;
	undef $/;
	
	if (exists $tag{"CMD"}) {
	    $ret = `$tag{"CMD"}`;
	}

	$/ = $back;

	return (1, $ret);
    }

    return (0, $ret);
}

# Replaces the pattern defined in the definition file
sub fillLine {
    my $outLine;
    my $ref;
    
    ($outLine, $ref) = @_;
    my %tag = %$ref;

    while ($outLine =~ /\&(\!|=)([^&;]*?);/) {
        my $op = $1;
	my $param = $2;
	my $repl;
	my $def;
	my $val;

	if ($param =~ /(.*?):(.*)/) {
	    $repl = uc $1;
	    $def = $2;
	    if (($op eq "!") && (exists $tag{$repl})) {
		$val = $tag{$repl};
		$val =~ s/&/#\|amp\|#/gs;
		$val =~ s/;/#\|pv\|#/gs;
		$outLine =~ s/\&!([^&;]*?);/$val/;
	    } elsif (($op eq "=") && (exists $constants{$repl})) {
		$val = $constants{$repl};
		$val =~ s/&/#\|amp\|#/gs;
		$val =~ s/;/#\|pv\|#/gs;
		$outLine =~ s/\&=([^&;]*?);/$val/;
	    } else {
		$def =~ s/&/#\|amp\|#/gs;
		$def =~ s/;/#\|pv\|#/gs;
		$outLine =~ s/\&$op([^&;]*?);/$def/;
	    }
	} elsif ($op eq "!"){
	    $repl = uc $param;
	    $val = $tag{$repl};
	    $val =~ s/&/#\|amp\|#/gs;
	    $val =~ s/;/#\|pv\|#/gs;
	    $outLine =~ s/\&!([^&;]*?);/$val/;
	} else {
	    $repl = uc $param;
	    $val = $constants{$repl};
	    $val =~ s/&/#\|amp\|#/gs;
	    $val =~ s/;/#\|pv\|#/gs;
	    $outLine =~ s/\&=([^&;]*?);/$val/;
	}
    }

    $outLine =~ s/\#\|amp\|\#/&/gs;
    $outLine =~ s/\#\|pv\|\#/;/gs;

    return $outLine;
}

sub SXMLMain {
    # Parses the file
    open(IN, $fnameIn) or die "File \"$fnameIn\" not found!\n\n";
    open(OUT, $fnameOut) or die "Cannot create file \"$fnameOut\"!\n\n";

    # The main loop: read a tag and process it
    while (! eof(IN)) {
	# Reads the text before '<' and write it to the file
	$/ = "<";
	$_ = <IN>;
  
	chop;

	# Eliminates the starting new line after a tag. If a space is required
	# puts a space after the tag and then the new line.
	s/\n(.*)/$1/ if ($prettyformat);
	
	# Uses the HTML semantics to handle with spaces.
	s/[\s\n]+/ /sg if ($htmlspaces);
	print OUT if ($iftexton && $texton);

	if (! eof(IN) ) {
	    # Reads the tag and process it
	    $/ = ">";
	    $_ = "<" . <IN>;

	    my %tag;
	    my $name;
	    my $outd;
	    my $match;
    
	    if (/^<\!\-\-/) {
		if ($_ !~ /\-\->$/) {
		    $/ = "-->";
		    $_ = <IN>;
		}
	    } else {
		($name, %tag) = parseTag $_;

		($match, $outd) = parseDocDirectives($name, \%tag);

		if ($match) {
		    print OUT $outd if ($iftexton && $texton && $outd);
		} elsif (exists $tags{$name}) {
		    my $ref = $tags{$name};

		    foreach $line (@$ref) {
			($match, $outd) = checkDirective($line, \%tag);
	  
			print OUT $outd if ($iftexton && $texton && $match && $outd);

			if ($iftexton && $texton && !$match) {
			    my $outLine = fillLine($line, \%tag);

			    print OUT $outLine if ($iftexton && $texton);
			}
		    }
		} else {
		    print OUT if ($iftexton && $texton);
		}
	    }
	}
    }
}

### Main code

# Load modules
do("$home/makegen");
do("$home/templatereader");

parseCmdLine;

if ($guile) {
    do("$home/guile");
} else {
    SXMLMain();
}

